{
  "abstract" : [
    {
      "text" : "Configuring your app.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/SwiftBundler\/documentation\/SwiftBundler"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/SwiftBundler\/documentation\/SwiftBundler\/configuration"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "SwiftBundler"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Configuration"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift Bundler’s configuration is stored in the ",
              "type" : "text"
            },
            {
              "code" : "Bundler.toml",
              "type" : "codeVoice"
            },
            {
              "text" : " file in the root directory of a package.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Example-configuration",
          "level" : 2,
          "text" : "Example configuration",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Below is an example configuration containing all fields.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "[apps.HelloWorld]",
            "product = \"HelloWorld\" # The package product to create the app from",
            "version = \"0.1.0\" # The app's version, displayed on macOS's automatic 'About HelloWorld' screen",
            "category = \"public.app-category.education\"",
            "bundle_identifier = \"com.example.HelloWorld\"",
            "minimum_macos_version = \"11\" # The minimum macOS version that the app should run on",
            "icon = \"icon.png\"",
            "prebuild_script = \".\/utils\/prebuild.sh\"",
            "postbuild_script = \".\/utils\/postbuild.sh\"",
            "",
            "[apps.HelloWorld.plist]",
            "commit = \"{COMMIT_HASH}\" # This could be any key-value pair, 'commit' is just an example",
            "# You can also define many other kinds of complex fields that you want, as an example, below",
            "# is how you would specify a list of URL schemes (http, ftp, and so on) supported by the app,",
            "# on macOS in this example, to allow opening your app from the URL: (ex. helloworld:\/\/open)",
            "CFBundleURLTypes = [ { type = \"dict\", value = { CFBundleTypeRole = 'Viewer', CFBundleURLName = 'HelloWorld', CFBundleURLSchemes = [ 'helloworld' ] } } ]"
          ],
          "syntax" : "toml",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Only the ",
                  "type" : "text"
                },
                {
                  "code" : "product",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "version",
                  "type" : "codeVoice"
                },
                {
                  "text" : " fields are required.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "App-Icons",
          "level" : 2,
          "text" : "App Icons",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To add an icon to your app, provide a value for the ",
              "type" : "text"
            },
            {
              "code" : "icon",
              "type" : "codeVoice"
            },
            {
              "text" : " field of your app’s configuration.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The value can either be a path to a ",
              "type" : "text"
            },
            {
              "code" : ".icns",
              "type" : "codeVoice"
            },
            {
              "text" : " file, or a ",
              "type" : "text"
            },
            {
              "code" : ".png",
              "type" : "codeVoice"
            },
            {
              "text" : " file (which is ideally 1024x1024px, with an alpha channel). If you want to use the same icon for all screen resolutions, just provide the icon as a ",
              "type" : "text"
            },
            {
              "code" : "png",
              "type" : "codeVoice"
            },
            {
              "text" : " file. If you want to have a custom level of detail for each resolution, create an ",
              "type" : "text"
            },
            {
              "code" : "icns",
              "type" : "codeVoice"
            },
            {
              "text" : " file. The easiest method for creating an ",
              "type" : "text"
            },
            {
              "code" : "icns",
              "type" : "codeVoice"
            },
            {
              "text" : " file is to create an ",
              "type" : "text"
            },
            {
              "code" : "iconset",
              "type" : "codeVoice"
            },
            {
              "text" : " using Xcode and then run the following command:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/usr\/bin\/iconutil -c icns \/path\/to\/AppIcon.iconset"
          ],
          "syntax" : "sh",
          "type" : "codeListing"
        },
        {
          "anchor" : "Infoplist-customization",
          "level" : 2,
          "text" : "Info.plist customization",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you want to add extra key-value pairs to your app’s ",
              "type" : "text"
            },
            {
              "code" : "Info.plist",
              "type" : "codeVoice"
            },
            {
              "text" : ", you can specify them in the app’s ",
              "type" : "text"
            },
            {
              "code" : "extra_plist_entries",
              "type" : "codeVoice"
            },
            {
              "text" : " field. Here’s an example configuration that appends the current commit hash to the version string displayed in the ",
              "type" : "text"
            },
            {
              "code" : "About HelloWorld",
              "type" : "codeVoice"
            },
            {
              "text" : " screen:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "# ...",
            "[apps.HelloWorld.extra_plist_entries]",
            "CFBundleShortVersionString = \"{VERSION}_{COMMIT_HASH}\""
          ],
          "syntax" : "toml",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "{VERSION}",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "{COMMIT_HASH}",
              "type" : "codeVoice"
            },
            {
              "text" : " variables get replaced at build time with their respective values. See the ‘Variable substitions’ section for more information.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you provide a value for a key that is already present in the default ",
              "type" : "text"
            },
            {
              "code" : "Info.plist",
              "type" : "codeVoice"
            },
            {
              "text" : ", the default value will be overidden with the value you provide.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Multi-app-packages",
          "level" : 2,
          "text" : "Multi-app packages",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift Bundler makes it trivial to create multiple apps from one package. Here’s an example configuration with a main app and an updater app:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "[apps.Example]",
            "product = \"Example\"",
            "version = \"0.1.0\"",
            "",
            "[apps.Updater]",
            "product = \"Updater\"",
            "version = \"1.0.1\" # The apps can specify separate versions"
          ],
          "syntax" : "toml",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once multiple apps are defined, certain commands such as ",
              "type" : "text"
            },
            {
              "code" : "run",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "bundle",
              "type" : "codeVoice"
            },
            {
              "text" : " require an app name to be provided in order to know which app to operate on.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Variable-substitions",
          "level" : 2,
          "text" : "Variable substitions",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Some configuration fields (currently only ",
              "type" : "text"
            },
            {
              "code" : "extra_plist_entries",
              "type" : "codeVoice"
            },
            {
              "text" : ") support variable substitution. This means that anything of the form ",
              "type" : "text"
            },
            {
              "code" : "{VARIABLE}",
              "type" : "codeVoice"
            },
            {
              "text" : " within the field’s value will be replaced by the variable’s value. Below is a list of all supported variables:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "VERSION",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": The app’s version",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "COMMIT_HASH",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": The commit hash of the git repository at the package’s root directory. If there is no git repository, an error will be thrown.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/SwiftBundler\/documentation\/SwiftBundler\/installation",
        "doc:\/\/SwiftBundler\/documentation\/SwiftBundler\/creating-an-app"
      ],
      "title" : "Getting started"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/swiftbundler\/configuration"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://SwiftBundler/documentation/SwiftBundler": {
  "abstract" : [
    {
      "text" : "Create macOS apps with Swift packages instead of Xcode projects.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/SwiftBundler\/documentation\/SwiftBundler",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "SwiftBundler",
  "type" : "topic",
  "url" : "\/documentation\/swiftbundler"
},
"doc://SwiftBundler/documentation/SwiftBundler/creating-an-app": {
  "abstract" : [
    {
      "text" : "Creating a hello world app.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/SwiftBundler\/documentation\/SwiftBundler\/creating-an-app",
  "kind" : "article",
  "role" : "article",
  "title" : "Creating an app",
  "type" : "topic",
  "url" : "\/documentation\/swiftbundler\/creating-an-app"
},
"doc://SwiftBundler/documentation/SwiftBundler/installation": {
  "abstract" : [
    {
      "text" : "Installing Swift Bundler on your system.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/SwiftBundler\/documentation\/SwiftBundler\/installation",
  "kind" : "article",
  "role" : "article",
  "title" : "Installation",
  "type" : "topic",
  "url" : "\/documentation\/swiftbundler\/installation"
}
}
}